{
  "contractName": "OpenTicket",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getTicket",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146100b4578063081812fc14610118578063095ea7b31461018557806323b872dd146101d257806342842e0e1461023f5780636352211e146102ac57806370a08231146103195780637dc379fa14610370578063a22cb465146103b8578063b88d4fde14610407578063e985e9c5146104ba575b600080fd5b3480156100c057600080fd5b506100fe60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610535565b604051808215151515815260200191505060405180910390f35b34801561012457600080fd5b506101436004803603810190808035906020019092919050505061059d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019157600080fd5b506101d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105ee565b005b3480156101de57600080fd5b5061023d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610733565b005b34801561024b57600080fd5b506102aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610758565b005b3480156102b857600080fd5b506102d760048036038101908080359060200190929190505050610779565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032557600080fd5b5061035a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107f7565b6040518082815260200191505060405180910390f35b34801561037c57600080fd5b5061039b60048036038101908080359060200190929190505050610882565b604051808381526020018281526020019250505060405180910390f35b3480156103c457600080fd5b50610405600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506108f2565b005b34801561041357600080fd5b506104b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a2e565b005b3480156104c657600080fd5b5061051b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a56565b604051808215151515815260200191505060405180910390f35b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b60006105a882610aea565b15156105b357600080fd5b6003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105f982610779565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561063657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061067657506106758133610a56565b5b151561068157600080fd5b826003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61073d3382610b5c565b151561074857600080fd5b610753838383610bf1565b505050565b6107748383836020604051908101604052806000815250610a2e565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156107ee57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561083457600080fd5b61087b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610db8565b9050919050565b60008061088d611115565b600680549050841015156108a057600080fd5b6006848154811015156108af57fe5b9060005260206000209060020201604080519081016040529081600082015481526020016001820154815250509050806000015181602001519250925050915091565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561092d57600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b610a39848484610733565b610a4584848484610dc6565b1515610a5057600080fd5b50505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600080610b6883610779565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610bd757508373ffffffffffffffffffffffffffffffffffffffff16610bbf8461059d565b73ffffffffffffffffffffffffffffffffffffffff16145b80610be85750610be78185610a56565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610c1182610779565b73ffffffffffffffffffffffffffffffffffffffff16141515610c3357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610c6f57600080fd5b610c7881610fe8565b610cbf600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206110a8565b610d06600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206110cb565b816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081600001549050919050565b600080610de88573ffffffffffffffffffffffffffffffffffffffff166110e1565b1515610df75760019150610fdf565b8473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610eec578082015181840152602081019050610ed1565b50505050905090810190601f168015610f195780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610f3b57600080fd5b505af1158015610f4f573d6000803e3d6000fd5b505050506040513d6020811015610f6557600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156110a55760006003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6110c0600182600001546110f490919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b600080823b905060008111915050919050565b60008083831115151561110657600080fd5b82840390508091505092915050565b6040805190810160405280600081526020016000815250905600a165627a7a7230582065f8f527cc9d4dd8c0facb8db4c34499dd8a09435102305059917ad30c0ae5ec0029",
  "sourceMap": "249:541:3:-;;;239:10:4;231:5;;:18;;;;;;;;;;;;;;;;;;640:40:8;237:10;659:20;;640:18;;;:40;;;:::i;:::-;1971::15;1228:10;1990:20;;1971:18;;;:40;;;:::i;:::-;249:541:3;;990:158:8;1080:10;1065:25;;:11;:25;;;;;1057:34;;;;;;;;1137:4;1101:20;:33;1122:11;1101:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;990:158;:::o;249:541:3:-;;;;;;;",
  "deployedSourceMap": "249:541:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:133:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;778:133:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3774:151:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3774:151:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3197:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3197:292:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5330:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5330:180:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6143:132;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6143:132:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2599:177;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2599:177:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2221:160;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2221:160:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;536:184:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;536:184:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4217:213:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4217:213:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6980:211;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6980:211:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4751:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4751:145:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:133:8;848:4;871:20;:33;892:11;871:33;;;;;;;;;;;;;;;;;;;;;;;;;;;864:40;;778:133;;;:::o;3774:151:15:-;3833:7;3860:16;3868:7;3860;:16::i;:::-;3852:25;;;;;;;;3894:15;:24;3910:7;3894:24;;;;;;;;;;;;;;;;;;;;;3887:31;;3774:151;;;:::o;3197:292::-;3260:13;3276:16;3284:7;3276;:16::i;:::-;3260:32;;3316:5;3310:11;;:2;:11;;;;3302:20;;;;;;;;3354:5;3340:19;;:10;:19;;;:58;;;;3363:35;3380:5;3387:10;3363:16;:35::i;:::-;3340:58;3332:67;;;;;;;;3437:2;3410:15;:24;3426:7;3410:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;3474:7;3470:2;3454:28;;3463:5;3454:28;;;;;;;;;;;;3197:292;;;:::o;5330:180::-;5420:39;5439:10;5451:7;5420:18;:39::i;:::-;5412:48;;;;;;;;5471:32;5485:4;5491:2;5495:7;5471:13;:32::i;:::-;5330:180;;;:::o;6143:132::-;6229:39;6246:4;6252:2;6256:7;6229:39;;;;;;;;;;;;;:16;:39::i;:::-;6143:132;;;:::o;2599:177::-;2654:7;2673:13;2689:11;:20;2701:7;2689:20;;;;;;;;;;;;;;;;;;;;;2673:36;;2744:1;2727:19;;:5;:19;;;;2719:28;;;;;;;;2764:5;2757:12;;2599:177;;;;:::o;2221:160::-;2276:7;2320:1;2303:19;;:5;:19;;;;2295:28;;;;;;;;2340:34;:17;:24;2358:5;2340:24;;;;;;;;;;;;;;;:32;:34::i;:::-;2333:41;;2221:160;;;:::o;536:184:3:-;585:4;591;636:21;;:::i;:::-;616:7;:14;;;;610:3;:20;602:29;;;;;;;;660:7;668:3;660:12;;;;;;;;;;;;;;;;;;;;636:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:7;:16;;;702:7;:12;;;677:38;;;;536:184;;;;:::o;4217:213:15:-;4302:10;4296:16;;:2;:16;;;;4288:25;;;;;;;;4360:8;4323:18;:30;4342:10;4323:30;;;;;;;;;;;;;;;:34;4354:2;4323:34;;;;;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;4410:2;4383:40;;4398:10;4383:40;;;4414:8;4383:40;;;;;;;;;;;;;;;;;;;;;;4217:213;;:::o;6980:211::-;7086:31;7099:4;7105:2;7109:7;7086:12;:31::i;:::-;7135:48;7158:4;7164:2;7168:7;7177:5;7135:22;:48::i;:::-;7127:57;;;;;;;;6980:211;;;;:::o;4751:145::-;4831:4;4854:18;:25;4873:5;4854:25;;;;;;;;;;;;;;;:35;4880:8;4854:35;;;;;;;;;;;;;;;;;;;;;;;;;4847:42;;4751:145;;;;:::o;7385:152::-;7442:4;7458:13;7474:11;:20;7486:7;7474:20;;;;;;;;;;;;;;;;;;;;;7458:36;;7528:1;7511:19;;:5;:19;;;;7504:26;;7385:152;;;;:::o;7897:246::-;7982:4;7998:13;8014:16;8022:7;8014;:16::i;:::-;7998:32;;8059:5;8048:16;;:7;:16;;;:51;;;;8092:7;8068:31;;:20;8080:7;8068:11;:20::i;:::-;:31;;;8048:51;:87;;;;8103:32;8120:5;8127:7;8103:16;:32::i;:::-;8048:87;8040:96;;7897:246;;;;;:::o;9845:362::-;9958:4;9938:24;;:16;9946:7;9938;:16::i;:::-;:24;;;9930:33;;;;;;;;9995:1;9981:16;;:2;:16;;;;9973:25;;;;;;;;10009:23;10024:7;10009:14;:23::i;:::-;10043:35;:17;:23;10061:4;10043:23;;;;;;;;;;;;;;;:33;:35::i;:::-;10088:33;:17;:21;10106:2;10088:21;;;;;;;;;;;;;;;:31;:33::i;:::-;10155:2;10132:11;:20;10144:7;10132:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;10192:7;10188:2;10173:27;;10182:4;10173:27;;;;;;;;;;;;9845:362;;;:::o;1063:112:7:-;1128:7;1154;:14;;;1147:21;;1063:112;;;:::o;10735:347:15:-;10856:4;10944:13;10881:15;:2;:13;;;:15::i;:::-;10880:16;10876:58;;;10919:4;10912:11;;;;10876:58;10976:2;10960:36;;;10997:10;11009:4;11015:7;11024:5;10960:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10960:70:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10960:70:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10960:70:15;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10960:70:15;;;;;;;;;;;;;;;;10944:86;;714:10;11058:16;;11048:26;;;:6;:26;;;;11040:35;;10735:347;;;;;;;;:::o;11243:171::-;11342:1;11306:38;;:15;:24;11322:7;11306:24;;;;;;;;;;;;;;;;;;;;;:38;;;;11302:106;;;11395:1;11360:15;:24;11376:7;11360:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;11302:106;11243:171;:::o;1276:108:7:-;1356:21;1375:1;1356:7;:14;;;:18;;:21;;;;:::i;:::-;1339:7;:14;;:38;;;;1276:108;:::o;1181:89::-;1262:1;1244:7;:14;;;:19;;;;;;;;;;;1181:89;:::o;464:616:18:-;524:4;540:12;1039:7;1027:20;1019:28;;1072:1;1065:4;:8;1058:15;;464:616;;;;:::o;1212:145:11:-;1270:7;1314:9;1302:1;1297;:6;;1289:15;;;;;;;;1330:1;1326;:5;1314:17;;1349:1;1342:8;;1212:145;;;;;:::o;249:541:3:-;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.4.24;\r\n\r\nimport 'openzeppelin-solidity/contracts/token/ERC721/ERC721.sol';\r\nimport \"./Ownable.sol\";\r\n/**\r\n* @title OpenTicket\r\n* @dev It is an implementation of ERC721 that provides ability to view information about tickets.\r\n*/\r\ncontract OpenTicket is Ownable,ERC721{\r\n\tstruct Ticket {\r\n\t\tuint event_id;\r\n\t\tuint seat;\r\n\t}\r\n\r\n\tTicket[] internal tickets;\r\n\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t* @dev Function to show ticket information.\r\n\t* @param _id uint - Ticket ID.\r\n\t* @return uint - Event ID.\r\n\t* @return uint - Ticket seat.\r\n\t*/\r\n\tfunction getTicket(uint _id) public view returns(uint, uint) {\r\n\t\trequire(_id < tickets.length);\r\n\t\tTicket memory _ticket = tickets[_id];\r\n\t\treturn(_ticket.event_id, _ticket.seat);\r\n\t}\r\n\tmodifier ownedTokens() {\r\n\trequire(msg.sender == owner);\r\n\t_;\r\n}\r\n}\r\n",
  "sourcePath": "C:\\Users\\hp\\Desktop\\proojecttoken\\contracts\\OpenTicket.sol",
  "ast": {
    "absolutePath": "/C/Users/hp/Desktop/proojecttoken/contracts/OpenTicket.sol",
    "exportedSymbols": {
      "OpenTicket": [
        497
      ]
    },
    "id": 498,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 442,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:3"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "id": 443,
        "nodeType": "ImportDirective",
        "scope": 498,
        "sourceUnit": 2096,
        "src": "28:65:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/hp/Desktop/proojecttoken/contracts/Ownable.sol",
        "file": "./Ownable.sol",
        "id": 444,
        "nodeType": "ImportDirective",
        "scope": 498,
        "sourceUnit": 523,
        "src": "95:23:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 445,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 522,
              "src": "272:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$522",
                "typeString": "contract Ownable"
              }
            },
            "id": 446,
            "nodeType": "InheritanceSpecifier",
            "src": "272:7:3"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 447,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2095,
              "src": "280:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2095",
                "typeString": "contract ERC721"
              }
            },
            "id": 448,
            "nodeType": "InheritanceSpecifier",
            "src": "280:6:3"
          }
        ],
        "contractDependencies": [
          522,
          819,
          829,
          2095,
          2198
        ],
        "contractKind": "contract",
        "documentation": "@title OpenTicket\r\n@dev It is an implementation of ERC721 that provides ability to view information about tickets.\r",
        "fullyImplemented": true,
        "id": 497,
        "linearizedBaseContracts": [
          497,
          2095,
          2198,
          819,
          829,
          522
        ],
        "name": "OpenTicket",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "OpenTicket.Ticket",
            "id": 453,
            "members": [
              {
                "constant": false,
                "id": 450,
                "name": "event_id",
                "nodeType": "VariableDeclaration",
                "scope": 453,
                "src": "309:13:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 449,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "309:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 452,
                "name": "seat",
                "nodeType": "VariableDeclaration",
                "scope": 453,
                "src": "327:9:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 451,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "327:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Ticket",
            "nodeType": "StructDefinition",
            "scope": 497,
            "src": "290:51:3",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 456,
            "name": "tickets",
            "nodeType": "VariableDeclaration",
            "scope": 497,
            "src": "346:25:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Ticket_$453_storage_$dyn_storage",
              "typeString": "struct OpenTicket.Ticket[]"
            },
            "typeName": {
              "baseType": {
                "contractScope": null,
                "id": 454,
                "name": "Ticket",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 453,
                "src": "346:6:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Ticket_$453_storage_ptr",
                  "typeString": "struct OpenTicket.Ticket"
                }
              },
              "id": 455,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "346:8:3",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Ticket_$453_storage_$dyn_storage_ptr",
                "typeString": "struct OpenTicket.Ticket[]"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 484,
              "nodeType": "Block",
              "src": "597:123:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 466,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 458,
                          "src": "610:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 467,
                            "name": "tickets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 456,
                            "src": "616:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Ticket_$453_storage_$dyn_storage",
                              "typeString": "struct OpenTicket.Ticket storage ref[] storage ref"
                            }
                          },
                          "id": 468,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "616:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "610:20:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 465,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2251,
                        2252
                      ],
                      "referencedDeclaration": 2251,
                      "src": "602:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "602:29:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 471,
                  "nodeType": "ExpressionStatement",
                  "src": "602:29:3"
                },
                {
                  "assignments": [
                    473
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 473,
                      "name": "_ticket",
                      "nodeType": "VariableDeclaration",
                      "scope": 485,
                      "src": "636:21:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Ticket_$453_memory_ptr",
                        "typeString": "struct OpenTicket.Ticket"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 472,
                        "name": "Ticket",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 453,
                        "src": "636:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Ticket_$453_storage_ptr",
                          "typeString": "struct OpenTicket.Ticket"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 477,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 474,
                      "name": "tickets",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 456,
                      "src": "660:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Ticket_$453_storage_$dyn_storage",
                        "typeString": "struct OpenTicket.Ticket storage ref[] storage ref"
                      }
                    },
                    "id": 476,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 475,
                      "name": "_id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 458,
                      "src": "668:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "660:12:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Ticket_$453_storage",
                      "typeString": "struct OpenTicket.Ticket storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "636:36:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 478,
                          "name": "_ticket",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 473,
                          "src": "684:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Ticket_$453_memory_ptr",
                            "typeString": "struct OpenTicket.Ticket memory"
                          }
                        },
                        "id": 479,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "event_id",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 450,
                        "src": "684:16:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 480,
                          "name": "_ticket",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 473,
                          "src": "702:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Ticket_$453_memory_ptr",
                            "typeString": "struct OpenTicket.Ticket memory"
                          }
                        },
                        "id": 481,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "seat",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 452,
                        "src": "702:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 482,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "683:32:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 464,
                  "id": 483,
                  "nodeType": "Return",
                  "src": "677:38:3"
                }
              ]
            },
            "documentation": "@dev Function to show ticket information.\r\n@param _id uint - Ticket ID.\r\n@return uint - Event ID.\r\n@return uint - Ticket seat.\r",
            "id": 485,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getTicket",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 459,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 458,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 485,
                  "src": "555:8:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 457,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "555:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "554:10:3"
            },
            "payable": false,
            "returnParameters": {
              "id": 464,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 461,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 485,
                  "src": "585:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 460,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "585:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 463,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 485,
                  "src": "591:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 462,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "591:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "584:12:3"
            },
            "scope": 497,
            "src": "536:184:3",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 495,
              "nodeType": "Block",
              "src": "746:41:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 491,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 488,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2248,
                            "src": "758:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "758:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 490,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 501,
                          "src": "772:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "758:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 487,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2251,
                        2252
                      ],
                      "referencedDeclaration": 2251,
                      "src": "750:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 492,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "750:28:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 493,
                  "nodeType": "ExpressionStatement",
                  "src": "750:28:3"
                },
                {
                  "id": 494,
                  "nodeType": "PlaceholderStatement",
                  "src": "782:1:3"
                }
              ]
            },
            "documentation": null,
            "id": 496,
            "name": "ownedTokens",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 486,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "743:2:3"
            },
            "src": "723:64:3",
            "visibility": "internal"
          }
        ],
        "scope": 498,
        "src": "249:541:3"
      }
    ],
    "src": "0:792:3"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/hp/Desktop/proojecttoken/contracts/OpenTicket.sol",
    "exportedSymbols": {
      "OpenTicket": [
        497
      ]
    },
    "id": 498,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 442,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:3"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "id": 443,
        "nodeType": "ImportDirective",
        "scope": 498,
        "sourceUnit": 2096,
        "src": "28:65:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/hp/Desktop/proojecttoken/contracts/Ownable.sol",
        "file": "./Ownable.sol",
        "id": 444,
        "nodeType": "ImportDirective",
        "scope": 498,
        "sourceUnit": 523,
        "src": "95:23:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 445,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 522,
              "src": "272:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$522",
                "typeString": "contract Ownable"
              }
            },
            "id": 446,
            "nodeType": "InheritanceSpecifier",
            "src": "272:7:3"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 447,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2095,
              "src": "280:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$2095",
                "typeString": "contract ERC721"
              }
            },
            "id": 448,
            "nodeType": "InheritanceSpecifier",
            "src": "280:6:3"
          }
        ],
        "contractDependencies": [
          522,
          819,
          829,
          2095,
          2198
        ],
        "contractKind": "contract",
        "documentation": "@title OpenTicket\r\n@dev It is an implementation of ERC721 that provides ability to view information about tickets.\r",
        "fullyImplemented": true,
        "id": 497,
        "linearizedBaseContracts": [
          497,
          2095,
          2198,
          819,
          829,
          522
        ],
        "name": "OpenTicket",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "OpenTicket.Ticket",
            "id": 453,
            "members": [
              {
                "constant": false,
                "id": 450,
                "name": "event_id",
                "nodeType": "VariableDeclaration",
                "scope": 453,
                "src": "309:13:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 449,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "309:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 452,
                "name": "seat",
                "nodeType": "VariableDeclaration",
                "scope": 453,
                "src": "327:9:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 451,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "327:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Ticket",
            "nodeType": "StructDefinition",
            "scope": 497,
            "src": "290:51:3",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 456,
            "name": "tickets",
            "nodeType": "VariableDeclaration",
            "scope": 497,
            "src": "346:25:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Ticket_$453_storage_$dyn_storage",
              "typeString": "struct OpenTicket.Ticket[]"
            },
            "typeName": {
              "baseType": {
                "contractScope": null,
                "id": 454,
                "name": "Ticket",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 453,
                "src": "346:6:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Ticket_$453_storage_ptr",
                  "typeString": "struct OpenTicket.Ticket"
                }
              },
              "id": 455,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "346:8:3",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Ticket_$453_storage_$dyn_storage_ptr",
                "typeString": "struct OpenTicket.Ticket[]"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 484,
              "nodeType": "Block",
              "src": "597:123:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 466,
                          "name": "_id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 458,
                          "src": "610:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 467,
                            "name": "tickets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 456,
                            "src": "616:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Ticket_$453_storage_$dyn_storage",
                              "typeString": "struct OpenTicket.Ticket storage ref[] storage ref"
                            }
                          },
                          "id": 468,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "616:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "610:20:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 465,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2251,
                        2252
                      ],
                      "referencedDeclaration": 2251,
                      "src": "602:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "602:29:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 471,
                  "nodeType": "ExpressionStatement",
                  "src": "602:29:3"
                },
                {
                  "assignments": [
                    473
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 473,
                      "name": "_ticket",
                      "nodeType": "VariableDeclaration",
                      "scope": 485,
                      "src": "636:21:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Ticket_$453_memory_ptr",
                        "typeString": "struct OpenTicket.Ticket"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 472,
                        "name": "Ticket",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 453,
                        "src": "636:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Ticket_$453_storage_ptr",
                          "typeString": "struct OpenTicket.Ticket"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 477,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 474,
                      "name": "tickets",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 456,
                      "src": "660:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Ticket_$453_storage_$dyn_storage",
                        "typeString": "struct OpenTicket.Ticket storage ref[] storage ref"
                      }
                    },
                    "id": 476,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 475,
                      "name": "_id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 458,
                      "src": "668:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "660:12:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Ticket_$453_storage",
                      "typeString": "struct OpenTicket.Ticket storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "636:36:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 478,
                          "name": "_ticket",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 473,
                          "src": "684:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Ticket_$453_memory_ptr",
                            "typeString": "struct OpenTicket.Ticket memory"
                          }
                        },
                        "id": 479,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "event_id",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 450,
                        "src": "684:16:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 480,
                          "name": "_ticket",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 473,
                          "src": "702:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Ticket_$453_memory_ptr",
                            "typeString": "struct OpenTicket.Ticket memory"
                          }
                        },
                        "id": 481,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "seat",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 452,
                        "src": "702:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 482,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "683:32:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 464,
                  "id": 483,
                  "nodeType": "Return",
                  "src": "677:38:3"
                }
              ]
            },
            "documentation": "@dev Function to show ticket information.\r\n@param _id uint - Ticket ID.\r\n@return uint - Event ID.\r\n@return uint - Ticket seat.\r",
            "id": 485,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getTicket",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 459,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 458,
                  "name": "_id",
                  "nodeType": "VariableDeclaration",
                  "scope": 485,
                  "src": "555:8:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 457,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "555:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "554:10:3"
            },
            "payable": false,
            "returnParameters": {
              "id": 464,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 461,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 485,
                  "src": "585:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 460,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "585:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 463,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 485,
                  "src": "591:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 462,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "591:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "584:12:3"
            },
            "scope": 497,
            "src": "536:184:3",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 495,
              "nodeType": "Block",
              "src": "746:41:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 491,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 488,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2248,
                            "src": "758:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "758:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 490,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 501,
                          "src": "772:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "758:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 487,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2251,
                        2252
                      ],
                      "referencedDeclaration": 2251,
                      "src": "750:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 492,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "750:28:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 493,
                  "nodeType": "ExpressionStatement",
                  "src": "750:28:3"
                },
                {
                  "id": 494,
                  "nodeType": "PlaceholderStatement",
                  "src": "782:1:3"
                }
              ]
            },
            "documentation": null,
            "id": 496,
            "name": "ownedTokens",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 486,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "743:2:3"
            },
            "src": "723:64:3",
            "visibility": "internal"
          }
        ],
        "scope": 498,
        "src": "249:541:3"
      }
    ],
    "src": "0:792:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.5",
  "updatedAt": "2019-05-21T11:13:23.699Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "getTicket(uint256)": {
        "details": "Function to show ticket information.\r",
        "params": {
          "_id": "uint - Ticket ID.\r"
        },
        "return": "uint - Event ID.\ruint - Ticket seat.\r"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "OpenTicket\r"
  },
  "userdoc": {
    "methods": {}
  }
}